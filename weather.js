#!/usr/bin/env node
import { getArgs } from './helpers/args.js';
import { getWeather } from './services/api.service.js';
import { printHelp, printError, printSuccess } from './services/log.service.js';
import { saveKeyValue, TOKEN_DICTIONARY } from './services/storage.service.js';
import dotenv from 'dotenv';

dotenv.config();

const saveToken = async (token) => {
  if (!token.length) {
    printError(' –ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω');
    return;
  }
  try {
    await saveKeyValue(TOKEN_DICTIONARY.token, token);
    printSuccess(' Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
  } catch (e) {
    printError(e.message);
  }
};

const getForcast = async (city = null) => {
  try {
    const cityToUse = city || process.env.CITY || '–ú–æ—Å–∫–≤–∞';
    const weather = await getWeather(cityToUse);

    console.log('='.repeat(40));
    console.log(`üå§Ô∏è  –ü–æ–≥–æ–¥–∞ –≤ ${weather.name}:`);
    console.log(`üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${Math.round(weather.main.temp)}¬∞C`);
    console.log(`üí®  –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${Math.round(weather.main.feels_like)}¬∞C`);
    console.log(`üíß  –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weather.main.humidity}%`);
    console.log(`üìä  –î–∞–≤–ª–µ–Ω–∏–µ: ${weather.main.pressure} hPa`);
    console.log(`üå¨Ô∏è  –í–µ—Ç–µ—Ä: ${weather.wind.speed} –º/—Å`);
    console.log(`üìù  ${weather.weather[0].description}`);
  } catch (e) {
    if (e?.response?.status == 404) {
      printError(' –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥');
    } else if (e?.response?.status == 401) {
      printError(' –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω');
    } else {
      printError(e.message);
    }
  }
};

const initCLI = () => {
  const args = getArgs(process.argv);
  const cityFromArg = process.argv[2];

  if (args.h) {
    printHelp();
    return;
  }

  if (args.s) {
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥
    return;
  }

  if (args.t) {
    if (!args.t || args.t === true) {
      printError(' –ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -t [YOUR_API_TOKEN]');
      return;
    }
    saveToken(args.t);
    getForcast();
    return;
  }

  if (cityFromArg && !cityFromArg.startsWith('-')) {
    getForcast(cityFromArg);
  } else {
    getForcast();
  }
};

initCLI();
